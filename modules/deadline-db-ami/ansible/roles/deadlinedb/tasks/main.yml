---
# tasks file for roles/deadlinedb

- name: diskspace-check
  include_role:
    name: diskspace-check
  vars:
    ignore_errors: true # allow for warnings, since we will free up space later as well.

- name: Ensure dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_deadlineuser_name }}"
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  with_items:
  - /deployuser/tmp/DeadlineRepository10/backup
  - /deployuser/tmp/DeadlineDatabase10/mongo/backup/
  when: reinstallation | bool
      
- name: Find backups if present - DeadlineDatabase10
  find: paths=/opt/Thinkbox/DeadlineDatabase10/mongo/backup/ file_type=directory patterns="*"
  register: backup_paths
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  when: reinstallation | bool

- name: Move backups if present out of the vm to conserve space.
  shell: sudo rsync --inplace --no-perms --omit-dir-times --no-o --no-g /opt/Thinkbox/DeadlineDatabase10/mongo/backup/* /deployuser/tmp/DeadlineDatabase10/mongo/backup --remove-source-files
  when: reinstallation | bool and backup_paths.matched|int != 0
  become_user: "{{ user_deadlineuser_name }}"
  become: true

- name: Find backups if present - DeadlineRepository10
  find: paths=/opt/Thinkbox/DeadlineRepository10/backup/ file_type=directory patterns="*"
  register: backup_paths_repo
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  when: reinstallation | bool

- name: Move backups if present out of the vm to conserve space.
  shell: sudo rsync --inplace --no-perms --omit-dir-times --no-o --no-g /opt/Thinkbox/DeadlineRepository10/backup/* /deployuser/tmp/DeadlineRepository10/backup --remove-source-files
  when: reinstallation | bool and backup_paths_repo.matched|int != 0
  become_user: "{{ user_deadlineuser_name }}"
  become: true

- name: diskspace-check
  include_role:
    name: diskspace-check

- name: Ensure dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_deadlineuser_name }}"
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  with_items:
  - '/home/{{ user_deadlineuser_name }}/Downloads'
  - '/home/{{ user_deadlineuser_name }}/Downloads/{{ deadline_linux_basename }}'

- name: Ensure dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_deadlineuser_name }}"
    group: syscontrol
    mode: u=rwX,g=rX,o-rwx
  become: true
  with_items:
  - /opt/Thinkbox
  - /opt/Thinkbox/certs

- name: ensure installer is synced to local bucket from AWS.
  shell:
    aws s3 sync s3://thinkbox-installers/Deadline/{{ deadline_version }}/Linux/Deadline-{{ deadline_version }}-linux-installers.tar s3://{{ installers_bucket }}/Deadline-{{ deadline_version }}-linux-installers.tar
  delegate_to: "{{ delegate_host }}"
  tags:
  - install
  - sync_installers

- name: s3-sync pull deadline installer # need cli installed.
  import_role:
    name: firehawkvfx.core.s3_sync
  vars:
    mode: "pull"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ deadline_linux_installers_tar | dirname }}"
    filename: "{{ deadline_linux_installers_tar | basename }}"
    sync_user: "{{ user_deadlineuser_name }}"
  tags:
  - install
  - sync_installers

- name: "Ensures tar exists {{ deadline_linux_installers_tar }}"
  stat:
    path: "{{ deadline_linux_installers_tar }}"
  register: deadline_linux_installers_tar_stat
  become_user: "{{ user_deadlineuser_name }}"
  become: true


# deadline can now be downloaded directly from s3.
# https://downloads.thinkboxsoftware.com/version_info.json

# aws s3api get-object --bucket thinkbox-installers --key Deadline/10.1.10.6/Windows/DeadlineClient-10.1.10.6-windows-installer.exe DeadlineClient-10.1.10.6-windows-installer.exe

# s3://thinkbox-installers/Deadline/10.1.9.2/Linux/Deadline-10.1.9.2-linux-installers.tar

- name: "Test: Fail if not existing tar."
  fail:
    msg: "Bailing out: You need to place the installer in the download directory.  Installer not found - {{ deadline_linux_installers_tar }}"
  when: deadline_linux_installers_tar_stat.stat.exists == false or deadline_linux_installers_tar_stat.stat.isdir == True

- name: Get the current caller identity information
  aws_caller_info:
  register: caller_info
  become_user: "{{ user_deadlineuser_name }}"

- name: show aws caller info
  debug:
    var: caller_info

- name: s3-sync push deadline installer
  import_role:
    name: firehawkvfx.core.s3_sync
  vars:
    mode: "push"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ deadline_linux_installers_tar | dirname }}"
    filename: "{{ deadline_linux_installers_tar | basename }}"
    sync_user: "{{ user_deadlineuser_name }}"
  tags:
  - install
  - sync_installers

- name: Extract
  unarchive:
    src: "{{ deadline_linux_installers_tar }}"
    dest: "/home/{{ user_deadlineuser_name }}/Downloads/{{ deadline_linux_basename }}"
    owner: "{{ user_deadlineuser_name }}"
    mode: u+x
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  tags:
  - install

- name: "Ansible find files in subdirectory downloads"
  find:
    paths: "/home/{{ user_deadlineuser_name }}/Downloads/{{ deadline_linux_basename }}"
    patterns: "*DeadlineRepository-{{ deadline_version }}-linux-x64-installer.run"
  register: files_matched
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  tags:
  - install
  - sync_installers

- name: set permissions
  file:
    path: "{{ files_matched.files[0].path }}"
    mode: u+r,u+x,u-w
    owner: "{{ user_deadlineuser_name }}"
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  tags:
  - install

- name: check hugepages disabled
  shell: |
    cat /sys/kernel/mm/transparent_hugepage/enabled
  register: command_result
  failed_when: "'[never]' not in command_result.stdout"
  become_user: "{{ user_deadlineuser_name }}"
  become: true

- name: Check if uninstall exists /opt/Thinkbox/DeadlineRepository10/uninstall
  stat:
    path: /opt/Thinkbox/DeadlineRepository10/uninstall
  register: stat_result
  become_user: "{{ user_deadlineuser_name }}"
  become: true

- name: Uninstall deadline db if already present
  shell: |
    cd /opt/Thinkbox/DeadlineRepository10
    sudo ./uninstall --mode unattended
  register: deadline_db_uninstall_output_shell
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  when: stat_result.stat.exists
  tags:
  - install

- name: Check if mongod Service Exists
  stat: path=/etc/init.d/mongod
  register: service_status
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  tags:
  - install

- name: Stop mongodb
  service: name=mongod state=stopped enabled=false
  become_user: "{{ user_deadlineuser_name }}"
  become: true
  when: service_status.stat.exists
  tags:
  - install

- name: Uninstall mongo db if already present
  file:
    state: absent
    path: "{{ item }}/"
  become: true
  when: stat_result.stat.exists
  with_items:
  - '/var/log/mongodb'
  - '/var/lib/mongodb'
  tags:
  - install

# - name: Uninstall mongo db if already present # TODO dont use sudo here, use become.
#   shell: |
#     sudo rm -fr /var/log/mongodb
#     sudo rm -fr /var/lib/mongodb
#   become_user: "{{ user_deadlineuser_name }}"
#   become: true
#   when: stat_result.stat.exists
#   tags:
#   - install

- name: purge mongo
  apt:
    name: 'mongod*'
    state: absent
    purge: true
  # become_user: "{{ user_deadlineuser_name }}"
  become: true
  when: stat_result.stat.exists
  tags:
  - install
  
- name: Install Deadline DB & pull latest log.
  block:
    - name: 'Install deadline db as {{ user_deadlineuser_name }}'
      shell: |
        # set -x
        cd /home/{{ user_deadlineuser_name }}/Downloads/
        sudo {{ files_matched.files[0].path }} --mode unattended --debuglevel 2 --prefix /opt/Thinkbox/DeadlineRepository10 --setpermissions true --installmongodb true --dbOverwrite true --mongodir /opt/Thinkbox/DeadlineDatabase10 --dbListeningPort 27017 --certgen_outdir /opt/Thinkbox/DeadlineDatabase10/certs --certgen_password {{ deadline_proxy_certificate_password }} --createX509dbuser true --requireSSL true --dbhost {{ openfirehawkserver }} --dbport 27017 --dbuser {{ user_deadlineuser_name }} --dbpassword {{ deadline_proxy_certificate_password }} --dbauth true --dbcertpass {{ deadline_proxy_certificate_password }} --dbssl true
      become_user: "{{ user_deadlineuser_name }}"
      register: deadline_db_install_output_shell
      become: true
    - name: Started service for deadlinedb # may need process to wait for process to be started
      service:
        name: Deadline10db
        state: restarted
        enabled: true
        daemon_reload: true
      become: true
    # - name: Restart service for deadlinedb # may need process to wait for process to be started
    #   service:
    #     name: Deadline10db
    #     state: restarted
    #   become: true
    #   tags:
    #   - install
    # - include_role:
    #     name: "deadlinedb"
    #     tasks_from: "logs"
  rescue:
    - include_role:
        name: "deadlinedb"
        tasks_from: "logs"
    - name: fatal
      set_fact:
        fatal_error: true
  always:
  - meta: end_play
    when: fatal_error is defined and fatal_error
  any_errors_fatal: yes
  tags:
  - install



