---
# tasks file for ansible/roles/openvpn_gateway

# sudo mkdir -p /etc/openvpn/scripts

# https://askubuntu.com/questions/1032476/ubuntu-18-04-no-dns-resolution-when-connected-to-openvpn
# - git:
#     repo: 'https://github.com/jonathanio/update-systemd-resolved.git'
#     dest: /home/deployuser/update-systemd-resolved
#     clone: yes
#   become: true

# - name: Build the default target
#   make:
#     chdir: /home/deployuser/update-systemd-resolved
#   become: true

# - name: Started service
#   service:
#     name: systemd-resolved.service
#     state: started
#     enabled: true
#     daemon_reload: true
#   become: true

# - name: copy template file
#   copy:
#     remote_src: true
#     src: /home/deployuser/update-systemd-resolved/update-systemd-resolved
#     dest: /etc/openvpn/scripts/update-systemd-resolved
#   become: true

- name: Ansible copy files from ansible_host (copied earlier from openvpn server instance) to firehawkgateway (openvpn client)
  copy:
    src: /home/deployuser/openvpn_config/{{ item }}
    dest: /home/deployuser/openvpn_config/
    owner: deployuser
    group: deployuser
    force: yes
    mode: '0400'
  become_user: deployuser
  become: true
  with_items:
    - ca.crt
    - client.crt
    - client.key
    - ta.key
    - openvpn.conf

- name: Create open vpn autologin 
  copy:
    content: |
              {{ openvpn_user }}
              {{ openvpn_user_pw }}
    dest: /home/deployuser/openvpn_config/yourserver.txt
    mode: '0400'

- name: replace
  lineinfile:
    path: /home/deployuser/openvpn_config/openvpn.conf
    state: present
    regexp: '^auth-user-pass\s'
    line: 'auth-user-pass yourserver.txt'

- name: insert after
  lineinfile:
    path: /home/deployuser/openvpn_config/openvpn.conf
    state: present
    line: 'push "redirect-gateway def1 bypass-dhcp"'
    insertafter: auth-user-pass

- name: replace
  lineinfile:
    path: /home/deployuser/openvpn_config/openvpn.conf
    state: present
    regexp: '^(.*)# OVPN_ACCESS_SERVER_PROFILE=(.*)$'
    line: '# OVPN_ACCESS_SERVER_PROFILE={{ openvpn_user }}@{{ vpn_address }}/AUTOLOGIN'

- name: insert OVPN_ACCESS_SERVER_AUTOLOGIN=1 after OVPN_ACCESS_SERVER_PROFILE
  lineinfile:
    path: /home/deployuser/openvpn_config/openvpn.conf
    state: present
    line: '# OVPN_ACCESS_SERVER_AUTOLOGIN=1'
    insertafter: '# OVPN_ACCESS_SERVER_PROFILE='

- name: Ansible copy local openvpn files to /etc/openvpn
  copy:
    src: /home/deployuser/openvpn_config/{{ item }}
    dest: /etc/openvpn/{{ item }}
    owner: deployuser
    group: deployuser
    mode: '0400'
    force: yes
    remote_src: true
  become: true
  with_items:
    - openvpn.conf
    - ca.crt
    - client.crt
    - client.key
    - ta.key
    - yourserver.txt

- name: Ansible allow autostart, uncomment
  replace:
    path: /etc/default/openvpn
    regexp: '^#(.*AUTOSTART="all".*)'
    replace: '\1'

- name: allow ip forwarding, uncomment
  replace:
    path: /etc/sysctl.conf
    regexp: '^#(.*net.ipv4.ip_forward=1.*)'
    replace: '\1'
  tags:
  - init

- name: force systemd to reread configs (2.4 and above).  Start openvpn client
  systemd:
    daemon_reload: yes
    name: openvpn
    state: started
    enabled: yes

- name: wait for first restart for service.
  command: sleep 60

- name: force systemd to restart openvpn client
  systemd:
    daemon_reload: yes
    name: openvpn
    state: restarted
    enabled: yes

### Configure DNS to point upstream

- name: 'set dns in resolve.conf'
  blockinfile:
    path: /etc/resolvconf/resolv.conf.d/head
    block: |
      nameserver {{ private_ip }}
      search ap-southeast-2.compute.internal
      search {{ private_domain_name }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
# nameserver 8.8.8.8 
# nameserver 8.8.4.4

- name: force systemd to restart resolvconf
  systemd:
    # daemon_reload: yes
    name: resolvconf
    state: restarted
    enabled: yes



# - name: configure routes to opposite dev/prod environment so that nodes in both envs can access licence server
#   shell: |
#     ip route list | grep {{ item.subnet }}
#     if [ $? -eq 0 ]; then
#       ip route del {{ item.subnet }}
#     else
#       echo "Route does not exist.  No need to delete {{ item.subnet }}"
#     fi
#     ip route add {{ item.subnet }} via {{ item.next_hop }} dev {{ vpn_nic }}
#   with_items:
#     - { subnet: "{{ private_subnet1 }}", next_hop: "{{ openfirehawkserver }}" }
#     - { subnet: "{{ public_subnet1 }}", next_hop: "{{ openfirehawkserver }}" }
#     - { subnet: "{{ vpn_cidr }}", next_hop: "{{ openfirehawkserver }}" }
#   tags:
#     - add-routes

# - name: insert/update block in /etc/network/interfaces for routes. configure routes to opposite dev/prod environment so that nodes in both envs can access licence server.  Remove route if it exists and re apply it.
#   blockinfile:
#     path: /etc/network/interfaces
#     block: |
#       up route add -net {{ item.subnet }} gw {{ item.next_hop }}
#     marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.subnet }}"
#   with_items:
#     - { subnet: "{{ private_subnet1 }}", next_hop: "{{ openfirehawkserver }}" }
#     - { subnet: "{{ public_subnet1 }}", next_hop: "{{ openfirehawkserver }}" }
#     - { subnet: "{{ vpn_cidr }}", next_hop: "{{ openfirehawkserver }}" }
#   tags:
#     - add-routes

# - name: configure routes to opposite dev/prod environment so that nodes in both envs can access licence server
#   shell: |
#     ip route list | grep {{ item.subnet }}
#     if [ $? -eq 0 ]; then
#       ip route del {{ item.subnet }}
#     else
#       echo "Route does not exit.  No need to delete {{ item.subnet }}"
#     fi
#     ip route add {{ item.subnet }} via {{ item.next_hop }} dev {{ vpn_nic }}
#   with_items:
#     - { subnet: "{{ private_subnet1_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#     - { subnet: "{{ public_subnet1_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#     - { subnet: "{{ vpn_cidr_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#   when: envtier == 'dev'
#   tags:
#     - add-routes

# - name: insert/update block in /etc/network/interfaces for routes. configure routes to opposite dev/prod environment so that nodes in both envs can access licence server.  Remove route if it exists and re apply it.
#   blockinfile:
#     path: /etc/network/interfaces
#     block: |
#       up route add -net {{ item.subnet }} gw {{ item.next_hop }}
#     marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.subnet }}"
#   with_items:
#     - { subnet: "{{ private_subnet1_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#     - { subnet: "{{ public_subnet1_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#     - { subnet: "{{ vpn_cidr_prod }}", next_hop: "{{ openfirehawkserver_prod }}" }
#   when: envtier == 'dev'
#   tags:
#     - add-routes

# - name: configure routes to opposite dev/prod environment so that nodes in both envs can access licence server.  Remove route if it exists and re apply it.
#   shell: |
#     ip route list | grep {{ item.subnet }}
#     if [ $? -eq 0 ]; then
#       ip route del {{ item.subnet }}
#     else
#       echo "Route does not exit.  No need to delete {{ item.subnet }}"
#     fi
#     ip route add {{ item.subnet }} via {{ item.next_hop }} dev {{ vpn_nic }}
#   with_items:
#     - { subnet: "{{ private_subnet1_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#     - { subnet: "{{ public_subnet1_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#     - { subnet: "{{ vpn_cidr_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#   when: envtier == 'prod'
#   tags:
#     - add-routes

# - name: insert/update block in /etc/network/interfaces for routes.  configure routes to opposite dev/prod environment so that nodes in both envs can access licence server.  Remove route if it exists and re apply it.
#   blockinfile:
#     path: /etc/network/interfaces
#     block: |
#       up route add -net {{ item.subnet }} gw {{ item.next_hop }}
#     marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.subnet }}"
#   with_items:
#     - { subnet: "{{ private_subnet1_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#     - { subnet: "{{ public_subnet1_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#     - { subnet: "{{ vpn_cidr_dev }}", next_hop: "{{ openfirehawkserver_dev }}" }
#   when: envtier == 'prod'
#   tags:
#     - add-routes