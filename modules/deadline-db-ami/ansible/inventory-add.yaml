# adds hosts / updates if present.  optionally add under a group name

- hosts: "{{ variable_host | default('ansible_control') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  
  vars:
    variable_user: deployuser
    variable_group: syscontrol
    hosts_dir: "{{ inventory }}"
    hosts_file: "{{ hosts_dir }}/hosts"
    # hosts_file: "{{ inventory }}/hosts"
    group_name: ''
    backup: false
    python_interpreter: /usr/bin/python3
    package_python_interpreter: /usr/bin/python3
  
  tasks:
  - name: Hosts file path to use is
    debug:
      var: hosts_file

  - name: "Ensure inventory dir exists {{ hosts_dir }}"
    file:
      name: "{{ hosts_dir }}"
      state: directory
      recurse: yes
      mode: u=rwX,g=rwX,o-rwx
      owner: "{{ variable_user }}"
      group: "{{ variable_group }}"
    tags: init
    become: true

  - name: "Touch a file {{ hosts_file }}"
    file:
      path: "{{ hosts_file }}"
      state: touch
      mode: u=rw,g=rw,o=r
      group: "{{ variable_group }}"
      owner: "{{ variable_user }}"
    tags: init
    become: true

  - name: Slurp file state
    slurp:
      src: "{{ hosts_file }}"
    register: slurpfile
    become: true
    tags: init

  - name: Display "{{ hosts_file }}" contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"
    tags: init
    become: true

  - name: ensure 2 new lines exist at end of file always
    shell: |
      {{ firehawk_path }}/scripts/append_blank_line.sh {{ hosts_file }}
    become: false
    tags: init

  - name: update ansible_control or add if not exist
    lineinfile:
      state: present
      path: "{{ hosts_file }}"
      line: "ansible_control ansible_connection=local ansible_python_interpreter=/usr/bin/python3 package_python_interpreter=/usr/bin/python3"
      backup: "{{ backup }}"
      owner: "{{ variable_user }}"
      regexp: "^ansible_control ansible_connection=.*"
      insertbefore: BOF
      create: true
    # become: false
    tags: init

  - name: ensure 2 new lines exist at end of file always
    shell: |
      {{ firehawk_path }}/scripts/append_blank_line.sh {{ hosts_file }}
    # become: false
    tags: init

  - name: update group or add if not exist
    lineinfile:
      state: present
      path: "{{ hosts_file }}"
      line: "[{{ group_name }}]\n"
      backup: "{{ backup }}"
      owner: "{{ variable_user }}"
      regexp: ".{{ group_name }}."
    when: group_name != ''
    become: yes

  - name: ensure 2 new lines exist at end of file always
    shell: |
      {{ firehawk_path }}/scripts/append_blank_line.sh {{ hosts_file }}
    become: true
    
  - name: Group add host- update host or add if not exist
    lineinfile:
      state: present
      path: "{{ hosts_file }}"
      line: "{{ host_name }} ansible_host={{ host_ip }} {{ insert_ssh_key_string | default('') }} ansible_python_interpreter={{ python_interpreter }} package_python_interpreter={{ package_python_interpreter }}"
      backup: "{{ backup }}"
      owner: "{{ variable_user }}"
      regexp: "^{{ host_name }} ansible_host=.*"
      insertafter: "^\\[{{ group_name }}\\]"
      create: true
    when: group_name != ''
    become: yes

  - name: Add host at start of file if not exist or update
    lineinfile:
      state: present
      path: "{{ hosts_file }}"
      line: "{{ host_name }} ansible_host={{ host_ip }} {{ insert_ssh_key_string | default('') }} ansible_python_interpreter={{ python_interpreter }} package_python_interpreter={{ package_python_interpreter }}"
      backup: "{{ backup }}"
      owner: "{{ variable_user }}"
      regexp: "^{{ host_name }} ansible_host=.*"
      insertafter: "^ansible_control ansible_connection=.*"
    when: group_name == ''
    become: yes

  - name: ensure 2 new lines exist at end of file always
    shell: |
      {{ firehawk_path }}/scripts/append_blank_line.sh {{ hosts_file }}
    become: true

  - name: Slurp file state
    slurp:
      src: "{{ hosts_file }}"
    register: slurpfile
    become: true
    tags: init

  - name: Display "{{ hosts_file }}" contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"
    tags: init
    become: true