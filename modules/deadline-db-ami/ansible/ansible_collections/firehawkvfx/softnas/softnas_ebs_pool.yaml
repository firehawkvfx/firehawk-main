- hosts: ansible_control
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  vars_files:
    - /deployuser/ansible/group_vars/all/vars
    - vars/main.yml

  tasks:
    - name: test local connection.
      debug:
        msg: "test local connection"

- hosts: role_softnas
  remote_user: "{{ softnas_ssh_user | default('ec2-user') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  vars_files:
    - /deployuser/ansible/group_vars/all/vars
    - vars/main.yml

  tasks:
    - name: test role_softnas connection.
      debug:
        msg: "test role_softnas connection"

- hosts: role_softnas
  remote_user: "{{ softnas_ssh_user | default('ec2-user') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    vars_files_locs: [ "/{{ secrets_path }}/{{ lookup('env','TF_VAR_envtier') }}/ebs-volumes/softnas_ebs_volumes.yaml", "files/softnas_ebs_volumes_{{ lookup('env','TF_VAR_envtier') }}.yaml", "files/softnas_ebs_volumes.yaml" ] # The first file found will be used, allowing the one in your secrets location to override defaults.
  
  vars_files:
    - /deployuser/ansible/group_vars/all/vars
    - vars/main.yml

  tasks:
  - name: aquire vars from secrets path before using defaults for softnas hosts 1
    include_vars: "{{ item }}"
    with_first_found: "{{ vars_files_locs }}"
    tags:
    - always

  - name: all volumes retrieved
    debug:
      var: "{{ mounts }}"

  - name: search for existing pools, to later create if missing
    stat:
      path: "/{{ item.pool_name }}/"
    register: existing_pools
    with_items:
      - "{{ exports }}"

  - name: result existing_pools
    debug:
      var: existing_pools

  - include_role:
      name: softnas-ebs-pool-create
    when: not outer_item.stat.exists
    with_items:
      - "{{ existing_pools.results }}"
    loop_control:
      loop_var: outer_item

  - name: search for existing volumes, to later create if missing
    stat:
      path: "/{{ item.pool_name }}/{{ item.volume_name }}/"
    register: existing_volumes
    with_items:
      - "{{ exports }}"

  - name: result existing_volumes
    debug:
      var: existing_volumes

  - include_role:
      name: softnas-ebs-volume-create
    when: not outer_item.stat.exists
    with_items:
      - "{{ existing_volumes.results }}"
    loop_control:
      loop_var: outer_item

# example commands that can be used to extend a pool with ZFS.
# ec2-user@nas1:~$ sudo zpool add devpool1 /dev/xvdf
# ec2-user@nas1:~$ df -h
# Filesystem           Size  Used Avail Use% Mounted on
# /dev/xvda1            30G   14G   15G  48% /
# tmpfs                7.9G     0  7.9G   0% /dev/shm
# devpool1              71G  128K   71G   1% /devpool1
# devpool1/devvolume1   71G  128K   71G   1% /devpool1/devvolume1
# ec2-user@nas1:~$ zfs set quota=none devpool1
# cannot set property for 'devpool1': permission denied
# ec2-user@nas1:~$ sudo zfs set quota=none devpool1