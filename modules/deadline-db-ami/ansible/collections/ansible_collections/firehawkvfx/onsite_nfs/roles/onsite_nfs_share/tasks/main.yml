---
# tasks file for ansible/roles/onsite_nfs_share

- name: aquire vars from secrets path before using defaults for onsite nfs mounts
  include_vars: "{{ item }}"
  with_first_found: "{{ onsite_nfs_vars_files_locs }}"
  tags:
  - always

- name: site_mounts
  debug:
    var: item
  with_items: "{{ site_mounts }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: "Check showmount to see whether /etc/exports on {{ localnas1_private_ip }} contains the mount {{ item.volume_name }}"
  shell: showmount -e {{ localnas1_private_ip }} | grep -E "^\/{{ item.volume_name }}.*"
  register: site_presence
  check_mode: no
  ignore_errors: yes
  changed_when: no
  with_items: "{{ site_mounts }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: export existance test
  debug:
    var: item
  when: item.rc == 0
  with_items: "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: export output always
  set_fact: exported_site_mounts="{{item}}"
  with_items: "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

### update fstab with found mounts

- name: local nas exports to mount to this instance
  debug:
    var: item
  with_items: 
  - "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: create mount directories (cloud)
  file: 
    path: "{{ item.item.mount_path }}"
    state: directory
    owner: "{{ variable_user }}"
    group: "{{ variable_user }}"
  become: true
  when: item.rc == 0
  with_items: 
  - "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: create site_bind1 directories (onsite mounts)
  file: 
    path: "{{ item.item.site_bind1 }}"
    state: directory
    owner: "{{ variable_user }}"
    group: "{{ variable_user }}"
  become: true
  when: item.item.site_bind1 and item.rc == 0
  with_items: 
  - "{{ site_presence.results }}"
  tags:
  - local_install_onsite_mounts

- name: create bind1 directories
  file: 
    path: "{{ item.item.bind1 }}"
    state: directory
    owner: "{{ variable_user }}"
    group: "{{ variable_user }}"
  when: item.item.bind1 and item.rc == 0
  with_items: 
  - "{{ site_presence.results }}"
  tags:
  - cloud_install

- name: create bind2 directories
  file: 
    path: "{{ item.item.bind2 }}"
    state: directory
    owner: "{{ variable_user }}"
    group: "{{ variable_user }}"
  when: item.item.bind2 and item.rc == 0
  with_items: 
  - "{{ site_presence.results }}"
  tags:
  - cloud_install

- name: Check if path is in /etc/exports.  If not present and this fails then ensure the path exists with 'showmount -e {ip address}'.  Check you have static routes configured correctly.
  fail:
    msg: "{{ item.item.path }} to mount at {{ item.item.mount_path }} is set to be present in exports dict but was not found with showmount from softnas host"
  when: item.item.state == "present" and item.rc == 1
  with_items:
  - "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

### cloud based mounts (from onsite) with ansible mount command

- name: insert/update block in in /etc/fstab on remote host for found exports from onsite nas using original unique pool and volume names - master
  become: yes
  mount:
    fstype: nfs4
    path: "{{ item.item.mount_path }}"
    opts: nfsvers=4.1,rsize=8192,wsize=8192,timeo=14,intr,_netdev
    src: "{{ item.item.ip }}:{{ item.item.path }}"
    state: "{{ ( item.item.mount_path and item.rc == 0 and item.item.state == 'present') | ternary( 'mounted' , 'absent' ) }}"
  with_items:
  - "{{ site_presence.results }}"
  tags:
  - cloud_install
  - local_install_onsite_mounts

- name: site_bind1 master mounts to named paths from local onsit nas to remote host.  bind2 references the absolute mount names such as /cloud_prod.  bind1 is relative site names such as /prod, which are not pushed from cloud to onsite since those paths should exist onsite from a high performance local mount
  become: yes
  mount:
    fstype: none
    path: "{{ item.item.site_bind1 }}"
    opts: "x-systemd.requires={{ item.item.mount_path }},x-systemd.automount,bind,_netdev"
    src: "{{ item.item.mount_path }}"
    # if the path exists, and it was found in the exports, then set to mounted, else remove.
    state: "{{ ( item.item.mount_path and item.item.site_bind1 and item.rc == 0 and item.item.state == 'present' ) | ternary( 'mounted' , 'absent' ) }}"
  with_items:
  - "{{ site_presence.results }}"
  tags:
  - local_install_onsite_mounts

- name: bind1 master mounts to named paths from local onsit nas to remote host.  bind2 references the absolute mount names such as /cloud_prod.  bind1 is relative site names such as /prod, which are not pushed from cloud to onsite since those paths should exist onsite from a high performance local mount
  become: yes
  mount:
    fstype: none
    path: "{{ item.item.bind1 }}"
    opts: "x-systemd.requires={{ item.item.mount_path }},x-systemd.automount,bind,_netdev"
    src: "{{ item.item.mount_path }}"
    # if the path exists, and it was found in the exports, then set to mounted, else remove.
    state: "{{ ( item.item.mount_path and item.item.bind1 and item.rc == 0 and item.item.state == 'present' ) | ternary( 'mounted' , 'absent' ) }}"
  with_items:
  - "{{ site_presence.results }}"
  tags:
  - cloud_install

- name: bind2 master mounts to named paths.  bind2 references the absolute mount names such as /cloud_prod.  bind1 is relative site names such as /prod, which are not pushed from cloud to onsite since those paths should exist onsite from a high performance local mount
  become: yes
  mount:
    fstype: none
    path: "{{ item.item.bind2 }}"
    opts: "x-systemd.requires={{ item.item.mount_path }},x-systemd.automount,bind,_netdev"
    src: "{{ item.item.mount_path }}"
    # if the path exists, and it was found in the exports, then set to mounted, else remove.
    state: "{{ ( item.item.mount_path and item.item.bind2 and item.rc == 0 and item.item.state == 'present' ) | ternary( 'mounted' , 'absent' ) }}"
  with_items:
  - "{{ site_presence.results }}"
  tags:
  - cloud_install

- name: insert/update block in /etc/sysconfig/network
  blockinfile:
    path: /etc/sysconfig/network
    marker: "# {mark} ANSIBLE MANAGED BLOCK delay"
    backup: yes
    content: |
      NETWORKDELAY=5
  become: true
  tags:
  - cloud_install