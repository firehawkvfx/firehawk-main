# update exports on softnas.
- hosts: role_softnas
  remote_user: "{{ softnas_ssh_user | default('ec2-user') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become_user: root
  become: true
  vars_files:
    - /deployuser/ansible/group_vars/all/vars
    - vars/main.yml

  vars:
    secrets_path: "{{ lookup('env','TF_VAR_secrets_path') }}"
    # when paths are found at these locations, they will be added to exports. otherwise no action will occur.
    # these defaults can be overidden by storing a config in /secrets/{{ envtier }}/ebs-volumes/softnas_ebs_volumes.yaml
    exports:
      - path: "/{{ resourcetier }}pool1/{{ resourcetier }}volume1/"
        pool_name: "{{ resourcetier }}pool1"
        volume_name: "{{ resourcetier }}volume1"
        state: present
        bind: /prod

    import_pool: true
    vars_files_locs: [ "/{{ secrets_path }}/{{ lookup('env','TF_VAR_envtier') }}/ebs-volumes/softnas_ebs_volumes.yaml", "files/softnas_ebs_volumes_{{ lookup('env','TF_VAR_envtier') }}.yaml", "files/softnas_ebs_volumes.yaml" ]

  tasks:
  - name: aquire vars from secrets path before using defaults for softnas hosts 1
    include_vars: "{{ item }}"
    with_first_found: "{{ vars_files_locs }}"
    tags:
    - always

  - name: set /etc/exports to allow ro on root per red hat docs https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/s1-nfs-server-config-exports
    lineinfile:
      path: /etc/exports
      #regexp: '^(.*)\/export \*\(ro,fsid=0\)(.*)'
      #regexp: '^(.*)\*\(ro,fsid=0\)(.*)'
      regexp: '^(.*)fsid=0(.*)'
      line: "/export *(rw,fsid=0,insecure,no_subtree_check,no_root_squash,nohide,async)"
      #(async,insecure,no_subtree_check,no_root_squash,rw,nohide)
      #line: "/ *(ro,fsid=0)"
      backup: yes
    when: import_pool

  - name: set /etc/exports
    lineinfile:
      path: /etc/exports
      line: "# These mounts are managed in ansible playbook softnas_ebs_disk_update_exports.yaml"
      backup: yes
    when: import_pool

  - name: ensure after a pool import that the path actually exists.  if so then exports will be updated
    stat:
      path: "/{{ item.pool_name }}/{{ item.volume_name }}/"
    register: volume_mount
    when: import_pool
    with_items:
      - "{{ exports }}"

  - name: inspect dict of results
    debug:
      var: "{{ item }}"
    with_items: "{{ volume_mount.results }}"
    
  - name: check is dir
    debug:
      msg: "/{{ item.item.pool_name }}/{{ item.item.volume_name }}/ exists on softnas instance"
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items: "{{ volume_mount.results }}"

  - stat:
      path: "/{{ item.item.pool_name }}/{{ item.item.volume_name }}/init"
    register: init
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items:
      - "{{ volume_mount.results }}"

  - name: inspect dict of results
    debug:
      var: "{{ item }}"
    with_items: "{{ init.results }}"

  - name: Ensure initialisation date is written to volume root to track the age of a volume
    copy:
      dest: "/{{ item.item.item.pool_name }}/{{ item.item.item.volume_name }}/init"
      content: "{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}"
    become: true
    when:  import_pool and item.stat.exists == false
    with_items:
      - "{{ init.results }}"

  - name: create mount directories in /export for bind
    file:
      path: "/export/{{ item.item.pool_name }}/{{ item.item.volume_name }}"
      state: directory
    become: true
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items:
      - "{{ volume_mount.results }}"

  - name: bind prep for exports and nfs4 compatibility
    become: yes
    mount:
      fstype: none
      path: "/export/{{ item.item.pool_name }}/{{ item.item.volume_name }}"
      opts: "x-systemd.requires=/{{ item.item.pool_name }}/{{ item.item.volume_name }}/,bind"
      src: "/{{ item.item.pool_name }}/{{ item.item.volume_name }}/"
      # if the path exists, and it was found in the exports, then set to mounted, else remove.
      # state: "{{ ( item.item.path and item.item.bind1 and item.rc == 0 and item.item.state == 'present' ) | ternary( 'mounted' , 'absent' ) }}"
      state: "{{ item.item.state }}"
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items:
      - "{{ volume_mount.results }}"

  - name: insert/update block in in /etc/exports for volume
    blockinfile:
      path: /etc/exports
      block: |
        # /{{ item.item.pool_name }}/{{ item.item.volume_name }} *(async,insecure,no_subtree_check,no_root_squash,rw,nohide)
        /export/{{ item.item.pool_name }}/{{ item.item.volume_name }} *(async,insecure,no_subtree_check,no_root_squash,rw,nohide)
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.path }}"
      state: "{{ item.item.state }}"
    become: true
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items:
      - "{{ volume_mount.results }}"
    
  - name: update exports
    command: "exportfs -r -a"
    register: update_exports_output
    become: true
    when: import_pool

  - debug:
      msg: "{{ update_exports_output.stdout }}"
    when: import_pool