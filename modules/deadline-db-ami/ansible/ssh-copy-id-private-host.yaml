- hosts: localhost
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"

  vars:
    #bastion_ip: false
    local: false
    ansible_ssh_private_key_file: "{{ onsite_workstation_private_ssh_key }}"
    public_key_location: "{{ general_use_ssh_key }}.pub"

  tasks:
  - name : load bash ssh-agent
    shell: |
      ssh-agent bash
      echo "SSH_AUTH_SOCK= $SSH_AUTH_SOCK"
      eval "$(ssh-agent)"
      echo "SSH_AUTH_SOCK= $SSH_AUTH_SOCK"
      
  - name: Generate /etc/ssh/ RSA host key
    shell: |
      ssh-agent bash
      echo "SSH_AUTH_SOCK= $SSH_AUTH_SOCK"
      eval "$(ssh-agent)"
      echo "SSH_AUTH_SOCK= $SSH_AUTH_SOCK"
      # ssh-agent bash && ssh-keygen -q -t rsa -f {{ ansible_ssh_private_key_file }} -C '' -N ''
      ssh-agent bash && ssh-add {{ ansible_ssh_private_key_file }}
    args:
      creates: "{{ ansible_ssh_private_key_file }}"
# may need to try different location - /etc/ssh/ssh_onsite_workstation_rsa_key
# vagrant is having issues

- hosts: "{{ variable_host | default('workstation.example.com') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  become: true
  gather_facts: "{{ variable_gather_facts | default('false') }}"

  vars:
    ansible_ssh_public_key_file: "{{ onsite_workstation_private_ssh_key }}.pub"
    ansible_become_pass: "{{ user_deadlineuser_pw }}"
    ansible_password: "{{ user_deadlineuser_pw }}"

  tasks:
  - command: echo 'connection established'

  - authorized_key:
      user: "{{ variable_user }}"
      state: present
      key: "{{ lookup('file', ansible_ssh_public_key_file) }}"

  - name: authorized keys permissions
    file:
      path: "/home/{{ variable_user }}/.ssh/authorized_keys"
      mode: '0644'
      owner: "{{ variable_user }}"
      state: file
    become: true

  - name: get the username
    command: whoami
    become: false
    register: whoami

  - set_fact:
      remote_user: "{{ whoami.stdout }}"
      
  - debug: var=remote_user

  - shell: |
      set -x
      ls -ltriah /home/{{ remote_user }}/.ssh/
      ls -ltriah /home/{{ variable_user }}/.ssh/
    become: true
    ignore_errors: yes

  - name: slurp file state
    slurp:
      src: "/home/{{ remote_user }}/.ssh/authorized_keys"
    register: slurpfile
    become: true
    ignore_errors: yes
  - name: display authorized_keys contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"

  - name: slurp file state
    slurp:
      src: "/home/{{ variable_user }}/.ssh/authorized_keys"
    register: slurpfile
    become: true
    ignore_errors: yes
  - name: display authorized_keys contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"