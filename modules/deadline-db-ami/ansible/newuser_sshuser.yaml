---
# this is the bootstraping process to create a deployment user on your local workstation.  it will initially create the user with another known password and user name, then disable remote access via passwords. the ssh key will only be accepted for remote administration. 
# guide : https://www.howtoforge.com/tutorial/setup-new-user-and-ssh-key-authentication-using-ansible/
# guide : https://medium.com/@khandelwal12nidhi/setup-ssh-key-and-initial-user-using-ansible-playbook-61eabbb0dba4

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default(user_inituser_name) }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"

  vars:
    ansible_become_password: "{{ user_inituser_pw }}"
    ansible_password: "{{ user_inituser_pw }}"
    public_key_location: "{{ general_use_ssh_key }}.pub"
    disable_pass_auth: True
    disable_root: True

  tasks:

  - name: Connection test without sudo - If this fails while running for the first time to configure a production workstation ensure 'PasswordAuthentication yes' is in /etc/ssh/sshd_config, and restart the service 'sudo systemctl restart sshd.service'. After first run and succesful login, password remote access will be disabled and only the ssh key will be used.
    command: "echo connected"

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default(user_inituser_name) }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    ansible_become_password: "{{ user_inituser_pw }}"
    ansible_password: "{{ user_inituser_pw }}"
    public_key_location: "{{ general_use_ssh_key }}.pub"
    disable_pass_auth: True
    disable_root: True
    my_password: "{{ user_deployuser_pw | string | password_hash('sha512') }}"

  tasks:

  - name: Connection test
    command: "echo connected"

  - name: Collect some facts only for ansible_distribution
    setup:
      gather_subset:
        - '!all'
        - 'min'
    tags:
    - always

  - name: Add a new user named deployuser
    user:
      name: deployuser
      shell: /bin/bash
      password: "{{ my_password }}"
      uid: "{{ deployuser_uid }}"

  - name: Add deployuser user to the sudoers
    copy:
      dest: "/etc/sudoers.d/deployuser"
      content: "deployuser  ALL=(ALL)  NOPASSWD: ALL"
      mode: '0644'

  - name: generate ssh key
    shell: |
      df -h
      ssh-keygen -q -t rsa -f /home/deployuser/.ssh/id_rsa -C "" -N ""
    args:
      creates: /home/deployuser/.ssh/id_rsa
    become_user: deployuser

  - name: init empty authorized_keys if it doesn't exist
    copy:
      content: ""
      dest: "/home/deployuser/.ssh/authorized_keys"
      force: no
    become: true

  - name: slurp file state
    slurp:
      src: "/home/deployuser/.ssh/authorized_keys"
    register: slurpfile
    become: true
  - name: display authorized_keys contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"

  - name: display public_key_location contents
    debug: var=item
    with_file:
      - "{{ public_key_location }}"

  - name: add deployuser as an authorized key on the remote host to deployuser account
    authorized_key:
      user: deployuser
      key: "{{ lookup('file', public_key_location) }}"
      state: present
  
  # this step allows repetition of this script after password is disabled.
  - name: "add connection user {{ user_inituser_name }} as an authorized key on the remote host as {{ user_inituser_name }}"
    authorized_key:
      user: "{{ user_inituser_name }}"
      key: "{{ lookup('file', public_key_location) }}"
      state: present

  - name: get the username
    command: whoami
    become: false
    register: whoami
  - set_fact:
      remote_user: "{{ whoami.stdout }}"
  - debug: var=remote_user

  - shell: |
      ls -ltriah /home/{{ remote_user }}/.ssh/
      ls -ltriah /home/{{ user_inituser_name }}/.ssh/
    become: true
    ignore_errors: yes

  - name: slurp file state
    slurp:
      src: "/home/{{ remote_user }}/.ssh/authorized_keys"
    register: slurpfile
    become: true
  - name: display authorized_keys contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"

  - name: slurp file state
    slurp:
      src: "/home/{{ user_inituser_name }}/.ssh/authorized_keys"
    register: slurpfile
    become: true
  - name: display authorized_keys contents
    debug: msg="{{ slurpfile['content'] | b64decode }}"

  - name: Disable Password Authentication.  Only SSH keys will be accepted after this point.
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: '^PasswordAuthentication'
      line: "PasswordAuthentication no"
      state: present
      backup: yes
    when: disable_pass_auth

  - name: Disable Root Login.
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin'
      line: "PermitRootLogin no"
      state: present
      backup: yes
    when: disable_root
    notify:
      - restart ssh

  handlers:
  - name: restart ssh
    service:
      name: sshd
      state: restarted