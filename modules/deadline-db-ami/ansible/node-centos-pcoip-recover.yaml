- hosts: ansible_control
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    # if true, teradici pcoip service will be restarted
    pcoip: true
    # see aws docs about this https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html#nvidia-GRID-driver
    # run this command to select a version and grid folder
    # aws s3 ls --recursive s3://ec2-linux-nvidia-drivers/
    nvidia_driver: 450.51.05
    grid_folder: g4/grid-11.0
    #  g4/grid-11.0/NVIDIA-Linux-x86_64-450.51.05-grid-aws.run
    driver_file: NVIDIA-Linux-x86_64-{{ nvidia_driver }}-grid-aws.run
    
  tasks:
  - name: ensure dir exists nvidia
    file:
      path: "/deployuser/downloads/nvidia"
      state: directory
      owner: "deployuser"
      group: "deployuser"
      mode: '0755'
    become: true

  - name: ensure dir exists grid folder
    file:
      path: "/deployuser/downloads/nvidia/{{ grid_folder }}"
      state: directory
      owner: "deployuser"
      group: "deployuser"
      mode: '0755'
    become: true

  - name: check dir
    shell: |
      # set -x
      cd /deployuser/downloads/nvidia/{{ grid_folder }}
    become_user: deployuser

  - name: check if driver version exists
    stat: 
      path: "/deployuser/downloads/nvidia/{{ grid_folder }}/{{ driver_file }}"
    register: driver_stat

  - name: s3-sync pull nvidia driver - all available
    import_role:
      name: firehawkvfx.core.s3_sync
    vars:
      mode: "pull"
      bucket: "ec2-linux-nvidia-drivers/{{ grid_folder }}"
      basedir: "/deployuser/downloads/nvidia/{{ grid_folder }}"
      filename: "*"
      sync_user: "deployuser"
    when: driver_stat.stat.exists == false

  # - name: get nvidia driver
  #   shell: |
  #     # set -x
  #     cd /deployuser/downloads/nvidia/{{ grid_folder }}
  #     aws s3 sync s3://ec2-linux-nvidia-drivers/{{ grid_folder }}/ . --delete
  #     #cp *.run /deployuser/downloads/nvidia/.
  #   become_user: deployuser
  #   when: driver_stat.stat.exists == false

  - name: "Ansible find files in subdirectory downloads /deployuser/downloads/nvidia/{{ grid_folder }}/"
    find:
      paths: "/deployuser/downloads/nvidia/{{ grid_folder }}/"
      patterns: "*{{ nvidia_driver }}*.run"
    register: files_matched
    become: true
  
  - debug:
      msg: "files_matched: {{ files_matched }}"

  - debug:
      msg: "installer path: {{ files_matched.files[0].path }}"

  # - name: ensure an s3 bucket exists to store large files / installers for faster redeployment.
  # - include_role:
  #     name: firehawkvfx.core.s3_bucket_shared
  #   tags:
  #     - sync_installers

  # - name: ensure the nvidia installer is syncronised with the bucket
  #   s3_sync:
  #     bucket: "{{ installers_bucket }}"
  #     file_root: /deployuser/downloads/nvidia/{{ grid_folder }}
  #     include: "{{ files_matched.files[0].path | basename }}"
  #     region: "{{ aws_region }}"
  #   tags:
  #     - sync_installers

  - name: s3-sync push to installers bucket
    import_role:
      name: firehawkvfx.core.s3_sync
    vars:
      mode: "push"
      basedir: "/deployuser/downloads/nvidia/{{ grid_folder }}"
      filename: "{{ files_matched.files[0].path | basename }}"
      sync_user: "deployuser"
    tags:
      - sync_installers

- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: centos
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  
  vars:
    nvidia_driver: 450.51.05
    #  g4/grid-11.0/NVIDIA-Linux-x86_64-450.51.05-grid-aws.run
    driver_file: NVIDIA-Linux-x86_64-{{ nvidia_driver }}-grid-aws.run
    epel_url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    epel_dest: /var/tmp/epel-release-latest-7.noarch.rpm
    grub_mod: "rd.driver.blacklist=nouveau nouveau.modeset=0"

  tasks:
  - name: upgrade all packages - yum update
    yum:
      name: '*'
      state: latest
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"


  - name: install mkpasswd
    package:
      name:
      - expect
      - epel-release
      state: present
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - name: install pip
    package:
      name: python-pip
      state: latest
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - name: install pexpect
    pip:
      name: pexpect
    become: yes
    
  - name: install passlib
    pip:
      name: passlib
    become: yes

  - name: install the package, force upgrade
    package: 
      name: python-boto
    become: true
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - name: install the package, force upgrade
    pip: 
      name: boto3
    become: true

  - name: ensure download exists
    file:
      path: /home/centos/Downloads/
      mode: '0755'
      owner: centos
      state: directory

  # - name: S3 GET nvidia driver
  #   aws_s3:
  #     bucket: "{{ installers_bucket }}"
  #     object: "{{ driver_file }}"
  #     dest: "/home/centos/Downloads/{{ driver_file }}"
  #     mode: get
  #     AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
  #     AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"
  #     region: "{{ aws_region }}"

  - name: s3-sync pull for install.
    import_role:
      name: firehawkvfx.core.s3_sync
    vars:
      mode: "pull"
      bucket: "{{ installers_bucket }}"
      basedir: "/home/centos/Downloads/"
      filename: "{{ driver_file }}"
      sync_user: "centos"
    # tags:
    #   - sync_installers

  - name: check if epel rpm exists
    stat: 
      path: "{{ epel_dest }}"
    register: epel_stat

  - get_url:
      dest: "{{ epel_dest }}"
      url: "{{ epel_url }}"
      mode: '0700'
    when: epel_stat.stat.exists == false
  
  - name: restart pcoip.service on centos, also issue daemon-reload to pick up config changes
    systemd:
      state: restarted
      daemon_reload: yes
      name: pcoip.service
    when: pcoip

  - name: fix boot and gui
    shell: |
      # set -x
      uptime
      #systemctl restart pcoip.service
      /bin/sh /home/centos/Downloads/{{ driver_file }} --dkms -s --install-libglvnd
      dracut -fv
    become: true
    register: recover_output

  - debug:
      msg: "{{ recover_output.stdout }}"

  # - name: Wait for the reboot to complete if there was a change.
  #   wait_for_connection:
  #     connect_timeout: 20
  #     sleep: 5
  #     delay: 180
  #     timeout: 800
  #   when: pcoip

  - name: restart pcoip.service on centos, also issue daemon-reload to pick up config changes
    systemd:
      state: restarted
      daemon_reload: yes
      name: pcoip.service
    when: pcoip