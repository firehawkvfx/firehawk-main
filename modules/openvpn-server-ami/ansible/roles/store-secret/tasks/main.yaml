- name: test
  debug:
    msg: "{{ item.key }}, {{ item.value.location }} is from: {{ item.value.location }} \n will encrypt at: {{ resourcetier }}/{{ item.value.target }}"

- name: Write secret to vault
  shell: |
    set -e
    file_path="{{ item.value.location }}"
    file_dir="{{ item.value.location | dirname }}"
    target="{{ resourcetier }}/files{{ item.value.target }}"
    
    if sudo test -f "$file_path"; then
      echo "Directory content:"
      sudo ls "$file_dir"

      export VAULT_ADDR=https://vault.service.consul:8200
      vault login -address="$VAULT_ADDR" -method=aws header_value=vault.service.consul role=provisioner-vault-role  
      vault kv put -address="$VAULT_ADDR" -format=json $target file="$(sudo cat $file_path)"
      
      if [[ "$OSTYPE" == "darwin"* ]]; then # Acquire file permissions.
          octal_permissions=$(sudo stat -f %A $file_path | rev | sed -E 's/^([[:digit:]]{4})([^[:space:]]+)/\1/' | rev ) # clip to 4 zeroes
      else
          octal_permissions=$(sudo stat --format '%a' $file_path | rev | sed -E 's/^([[:digit:]]{4})([^[:space:]]+)/\1/' | rev) # clip to 4 zeroes
      fi

      octal_permissions=$( python -c "print( \"$octal_permissions\".zfill(4) )" ) # pad to 4 zeroes

      vault kv patch -address="$VAULT_ADDR" -format=json $target permissions="$octal_permissions"
      
      file_uid="$(sudo stat --format '%u' $file_path)"
      vault kv patch -address="$VAULT_ADDR" -format=json $target owner="$(sudo id -un -- $file_uid)"
      vault kv patch -address="$VAULT_ADDR" -format=json $target uid="$file_uid"
      
      file_gid="$(sudo stat --format '%g' $file_path)"
      # vault kv patch -address="$VAULT_ADDR" -format=json $target group=
      vault kv patch -address="$VAULT_ADDR" -format=json $target gid="$file_gid"
    else
      print "Error: file not found: $file_path"
      exit 1
    fi
  args:
    executable: /bin/bash

- name: Removing original file from disk
  shell: |
    rm -f {{ item.value.location }}
  become: true
  args:
    executable: /bin/bash
  when: remove_file|bool